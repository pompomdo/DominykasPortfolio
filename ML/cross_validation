# Cross-validation loops for ML

    load("test.RData")
    load("train.RData")

    model1 <- lm(overall~.,data=train)
    model2 <- step(lm(overall~.,data=train),direction="both")
    formula(model2)
    car::scatterplotMatrix(Filter(is.numeric, train)[, 1:3])

###### specify number of folds
    k <- 5

###### randomly shuffle the data
    train <- train[sample(nrow(train)), ]

###### cut the sequence 1:n into k equally sized folds
    folds <- cut(1:nrow(train), breaks = k, labels = FALSE)

###### empty error vector of length 5
    error_vector <- numeric(5)


## loop for k-fold cross validation and transformation of variables to reach lower score in error vector

    for (i in 1:k) {
      test_indexes <- which(folds == i)
      test_fold <- train[test_indexes, ]
      train_folds <- train[-test_indexes, ]
      model <- glm(formula = overall ~ age + preferred_foot + international_reputation +
        weak_foot + skill_moves + work_rate + position + contract_valid_until +
        finishing + heading_accuracy + short_passing + volleys +
        dribbling + long_passing + ball_control + acceleration +
        log(sprint_speed) + agility + reactions + balance + shot_power +
        stamina + strength + aggression + positioning + composure +
        marking + standing_tackle + sliding_tackle + gk_diving +
        gk_handling + gk_kicking + gk_positioning + gk_reflexes +
        log(value_numeric_pounds) + log(wage_numeric_pounds) + weight_pds +
        log(release_clause_num), data = train)
      predicted <- predict(model,newdata=test_fold)

##### Calculating root mean squared error (RMSE)

      error_vector[i] <- sqrt(sum((((predicted-test_fold$overall)^2)/nrow(test_fold))))
    }

    mean(error_vector)

    model_best <- lm(formula = overall ~ age + preferred_foot + international_reputation +
        weak_foot + skill_moves + work_rate + position + log(contract_valid_until) +
        finishing + heading_accuracy + short_passing + volleys +
        dribbling + long_passing + ball_control + acceleration +
        log(sprint_speed) + agility + reactions + balance + shot_power +
        stamina + strength + aggression + positioning + composure +
        marking + standing_tackle + sliding_tackle + gk_diving +
        gk_handling + gk_kicking + gk_positioning + gk_reflexes +
        log(value_numeric_pounds) + log(wage_numeric_pounds) + weight_pds +
        release_clause_num, data = train)

###### predictions
    predict_test <- predict(model_best,newdata = test)
